#!/bin/sh

WALLPAPERS_DIR="$HOME/pictures/wallpapers/walls"
LOCKSCREENS_DIR="$HOME/pictures/wallpapers/lockscreens"
I3CONFIG_PATH="$XDG_CONFIG_HOME/i3"
LOCKSCREEN_SCRIPT_PATH="$HOME/.dotfiles/scripts/.local/bin"

function print_help() {
  help="wallpaper: A command-line tool for managing wallpapers and lockscreens in i3 using feh.

Usage: wallpaper [command] [arguments]

Commands:

 --add-wall [-a] /path/to/image         Add an image to the wallpapers directory and create a corresponding lockscreen image. The image will be copied into the wallpapers directory. Prompts whether to set it as the current wallpaper.

 --create-lockscreen [-cl] <imagename>  Create a lockscreen image from an existing image in the wallpapers directory. The image name should match the name of an image inside your wallpapers directory

 --set-lockscreens [-sl]                Create lockscreen images from all images currently in your wallpapers directory. Use this command to refresh lockscreens or reset the lockscreen images directory.

 --set-wall [-sw]                       imagename Set the specified image as your i3 wallpaper. The image must exist in the wallpapers directory.

 --set-mode [-sm] <mode>                Set the scaling mode for your wallpaper. Options are: "tile", "center", "max", "fill".


Arguments:

 imagename   The name of the image file (without extension for --create-lockscreen and --set-wall; the extension is added automatically if missing for --add-wall).


Examples:

 Add an image and set it as wallpaper:
  wallpaper --add-wall my_image.jpg

 Create a lockscreen image:
  wallpaper --create-lockscreen my_image

 Set all lockscreen images:
  wallpaper --set-lockscreens

 Set a specific wallpaper:
  wallpaper --set-wall my_image

 Set wallpaper scaling mode to "fill":
  wallpaper --set-mode fill


Notes:
• The wallpapers directory is assumed to be in the current working directory unless specified otherwise. The lockscreen images are created in a subdirectory.
• Make sure you have the necessary dependencies (i3, feh, etc.) installed. Error messages are shown if there is an issue with the dependencies
• Make sure to set the lockscreen script path in the wallpaper script file

"
  
  if type "less" > /dev/null; then
    echo "$help" | less
  else
    echo "$help"
  fi
}

function print_err() {
  err=$1
  echo "$1" >&2
  echo "Enter [wallpaper --help] for help"
  exit 1
}

# converts an image to jpg and moves it into WALLPAPERS directory
add_wall_image() {
  image_path=$1
  new_image_name=$2

  if [ ! -f "$image_path" ]; then
    print_err "Error: File doesn't exists."
    exit 1
  fi

  extension=${image_path##*.}
  mimetype=$(file -b --mime-type "$image_path" | sed 's/\/.*//g')

  if [ "$mimetype" != "image" ]; then
    print_err "Error: Selected file is not an image."
    exit 1
  fi

  if [ "$extension" = "jpg" ]; then
    echo "Copying image into wallpapers directory..."
    cp "$image_path" "$WALLPAPERS_DIR/$new_image_name.jpg"
    echo "Wallpaper image is moved into wallpapers directory successfully."
  else
    echo "File is not jpg, converting to jpg..."
    ffmpeg -i "$image_path" "$WALLPAPERS_DIR/$new_image_name.jpg" -loglevel error
    echo "Wallpaper image converted into jpg, and moved into wallpapers directory successfully."
  fi
}

# selects an image inside WALLPAPERS directory and creates a lockscreen image based on it
create_lockscreen_image() {
  image_name=$1
  silent_flag=$2
  image_path=$WALLPAPERS_DIR/$image_name

  if [ ! -f "$image_path" ]; then
    print_err "Error: Wallpaper with name: $image_name doesn't exists inside wallpapers directory."
    exit 1
  fi

  extension=${image_path##*.}
  mimetype=$(file -b --mime-type "$image_path" | sed 's/\/.*//g')

  if [ "$mimetype" != "image" ] || [ "$extension" != "jpg" ]; then
    print_err "Error: Selected file $image_name is not an image or is not jpg."
    exit 1
  fi

  image_basename=${image_name%.*}

  lockscreen_path=$LOCKSCREENS_DIR/$image_basename.png

  if [ -f "$lockscreen_path" ]; then
    [ "$silent_flag" -eq 0 ] && echo "Lockscreen of image $image_name already exists."
  else
    [ "$silent_flag" -eq 0 ] && echo "Creating lockscreen image..."
    ffmpeg -i "$image_path" -vf "scale=1920:1080, boxblur=15" "$lockscreen_path" -loglevel error
    [ "$silent_flag" -eq 0 ] && echo "Lockscreen image of $image_name has been created successfully."
  fi
}

# creates lockscreen image with all the images inside the WALLPAPERS directory
# (if there is not a lockscreen image exists)
set_all_lockscreens() {
  echo "Creating lockscreen image for all wallpapers..."

  for file in "$WALLPAPERS_DIR"/*; do

    if [ -f "$file" ]; then
      file_name=${file##*/}
      create_lockscreen_image "$file_name" 1
    fi
  done

  echo "Lockscreen images have been created successfully."
}

# sets the i3 background variable name
set_i3_background() {
  image_name=$1
  image_path=$WALLPAPERS_DIR/$image_name.jpg

  if [ ! -f "$image_path" ]; then
    print_err "Error: Wallpaper with name: $image_name.jpg doesn't exists inside wallpapers directory."
    exit 1
  fi

  extension=${image_path##*.}
  mimetype=$(file -b --mime-type "$image_path" | sed 's/\/.*//g')

  if [ "$mimetype" != "image" ] || [ "$extension" != "jpg" ]; then
    print_err "Error: Selected file $image_name is not an image or is not jpg."
    exit 1
  fi

  i3_config_file_path=$I3CONFIG_PATH/config
  lockscreen_script=$LOCKSCREEN_SCRIPT_PATH/start_i3lock
  image_bg_mode=$(cat $i3_config_file_path | grep "bgmode" | sed 's/.*\(\".*\"\)/\1/' | sed 's/\"//g')

  grep bgname "$i3_config_file_path" | sed -i "/set \$bgname/s/\"[^\"]*\"/\"$image_name\"/" "$i3_config_file_path"
  sed -i "s/BGNAME=.*/\BGNAME=\"$image_name\"/" "$lockscreen_script"

  echo "I3 config updated."
  feh --no-fehbg $image_bg_mode "$image_path"
  pkill xss-lock
  i3 reload &> /dev/null
  echo "Wallpaper updated successfully."
}

# sets the i3 background mode
set_i3_background_mode() {
  image_bg_mode=$1

  if [ "$image_bg_mode" != "center" ] && [ $image_bg_mode != "max" ] && [ $image_bg_mode != "tile" ] && [ $image_bg_mode != "fill" ]; then
    print_err "Error: Wrong option"
    exit 1
  fi

  i3_config_file_path=$I3CONFIG_PATH/config
  image_bg_name=$(cat $i3_config_file_path | grep "bgname" | sed 's/.*\(\".*\"\)/\1/' | sed 's/\"//g')
  image_path=$WALLPAPERS_DIR/$image_bg_name.jpg

  grep bgmode "$i3_config_file_path" | sed -i "/set \$bgmode/s/\"[^\"]*\"/\"--bg-$image_bg_mode\"/" "$i3_config_file_path"

  echo "I3 config updated."
  feh --no-fehbg --bg-$image_bg_mode "$image_path"
  pkill xss-lock
  i3 reload &> /dev/null
  echo "Wallpaper updated successfully."
}

first_arg=$1

case $first_arg in
"--help" | "-h")
  print_help
  exit 0
  ;;
"--add-wall" | "-a")
  file_name=$2
  file_path=$PWD/$file_name
  printf "Enter wallpaper name: "
  read -r wall_name

  add_wall_image "$file_path" "$wall_name"
  create_lockscreen_image "$wall_name.jpg" 0

  printf "You want to set the wallpaper? [y/n] "
  read -r ans

  if [ "$ans" = "y" ]; then
    set_i3_background "$wall_name"
  else
    echo "Wallpaper has been added, now you can set it by running: "
    echo "wallpaper --set-wall $wall_name"
  fi

  exit 0
  ;;
"--create-lockscreen" | "-cl")
  file_name=$2

  create_lockscreen_image "$file_name" 0
  exit 0
  ;;
"--set-lockscreens" | "-sl")
  printf "Are you sure that you want to set all the lockscreen images? [y/n] "
  read -r ans

  if [ "$ans" = "y" ]; then
    set_all_lockscreens
  fi

  exit 1
  ;;
"--set-wall" | "-sw")
  wall_name=$2

  set_i3_background "$wall_name"

  exit 0
  ;;
"--set-mode" | "-sm")
  wall_mode=$2

  set_i3_background_mode "$wall_mode"

  exit 0
  ;;
esac

print_err "Error: Invalid argument"
