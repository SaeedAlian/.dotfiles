#!/bin/sh

MOUNT_DIR="$HOME/mount"
USER_ID=$(id -u)
GROUP_ID=$(id -g)

function print_err() {
  err=$1
  echo "Error: $1" >&2
  echo "Enter [dmount --help] for help"
  exit 1
}

function print_help() {
  help="dmount: A command-line tool for safely mounting devices to $MOUNT_DIR/<mountpoint> with user ownership.

Usage:

  dmount <device_name> <mountpoint>

Arguments:

  device_name        The device name without /dev/ prefix (e.g., sdb1).

  mountpoint         The name of the mount directory inside $MOUNT_DIR (e.g., mydrive).

Options:

  --help             Show this help message and exit.

Examples:

• Mount /dev/sdb1 to $MOUNT_DIR/usb:
  dmount sdb1 usb

• Automatically create $MOUNT_DIR/mydrive and mount /dev/sdc1 with user access:
  dmount sdc1 mydrive

Notes:
 • This script checks if the device is already mounted or if the mountpoint is in use.
 • The mounted filesystem will be owned by the current user (UID=$(id -u), GID=$(id -g)).
 • Requires sudo access to perform mounting.
 • Automatically creates the mountpoint directory if it doesn't exist.

"

  if type "less" > /dev/null; then
    echo "$help" | less
  else
    echo "$help"
  fi
}

if ! [ -d "$MOUNT_DIR" ]; then
	mkdir -p "$MOUNT_DIR"
fi

if [ "$1" = "--help" ]; then
  print_help
  exit 0
fi

device=$1
mountpoint=$2

if [ -z "$device" ]; then
  print_err "Device is empty"
fi

if [ -z "$mountpoint" ]; then
  print_err "Mountpoint is empty"
fi


device="/dev/$device"
mountpoint="$MOUNT_DIR/$mountpoint"

if grep -qs "$device" /proc/mounts; then
  print_err "Device is already mounted!!"
fi

if mountpoint -q "$mountpoint"; then
  print_err "$mountpoint is already a mountpoint!!"
fi

if ! [ -d "$mountpoint" ]; then
	sudo mkdir -p "$mountpoint"
fi

sudo mount -o uid="$USER_ID",gid="$GROUP_ID",fmask=0111,dmask=0000 "$device" "$mountpoint"
